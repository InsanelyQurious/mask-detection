{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<main>\n  <body>\n    <h1>Mask detector</h1>\n    <div id=\"loadingMessage\">ðŸŽ¥ Unable to access video stream (please make sure you have a webcam enabled)</div>\n    <canvas id=\"canvasResult\" hidden></canvas>\n    <canvas id=\"canvas\" hidden></canvas>\n  </body>\n</main>\n\n<script>\n  import { onMount } from 'svelte';\n  import * as cvstfjs from '@microsoft/customvision-tfjs';\n\n  let model = new cvstfjs.ObjectDetectionModel();\n\n\n  onMount(async() => {\n    var video = document.createElement(\"video\");\n    var canvasElement = document.getElementById(\"canvas\");\n    var canvas = canvasElement.getContext(\"2d\");\n    var loadingMessage = document.getElementById(\"loadingMessage\");\n    await model.loadModelAsync('/mask-detection/model/model.json');\n\n\n    // Use facingMode: environment to attemt to get the front camera on phones\n    navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } }).then(function(stream) {\n      video.srcObject = stream;\n      video.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n      video.play();\n      requestAnimationFrame(tick);\n    });\n\n    async function tick() {\n      loadingMessage.innerText = \"âŒ› Loading video...\"\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        loadingMessage.hidden = true;\n        canvasElement.hidden = false;\n\n        const frame = video\n        canvasElement.height = frame.videoHeight;\n        canvasElement.width = frame.videoWidth;\n        canvas.drawImage(frame, 0, 0, canvasElement.width, canvasElement.height);\n        var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\n\n        const time = new Date()\n        if (time.getSeconds() % 1 == 0) {\n\n          const result = await model.executeAsync(imageData);\n          const probs = result[1]\n          const boxes = result[0]\n          const threshold = 0.25\n\n          if (probs.some(x => x > threshold)) {\n            var canvasElementResult = document.getElementById(\"canvasResult\");\n            var canvasResult = canvasElementResult.getContext(\"2d\");\n            canvasElementResult.hidden = false;\n            canvasElementResult.height = frame.videoHeight;\n            canvasElementResult.width = frame.videoWidth;\n            canvasResult.drawImage(frame, 0, 0, canvasElementResult.width, canvasElementResult.height);\n            boxes.forEach((item, idx) => {\n              if (probs[idx] > threshold) {\n                const x1 = item[0] * imageData.width\n                const y1 = item[1] * imageData.height\n                const x2 = item[2] * imageData.width\n                const y2 = item[3] * imageData.height\n                canvasResult.beginPath();\n                canvasResult.lineWidth = 10;\n                canvasResult.strokeStyle = 'red';\n                canvasResult.strokeRect(x1, y1, (x2-x1), (y2 -y1));\n              }\n            })\n          }\n\n        }\n      }\n      requestAnimationFrame(tick)\n    }\n\n  })\n\n\n</script>\n\n\n<style>\n  body {\n    font-family: 'Ropa Sans', sans-serif;\n    color: #333;\n    max-width: 640px;\n    margin: 0 auto;\n    position: relative;\n  }\n\n  h1 {\n    margin: 10px 0;\n    font-size: 40px;\n  }\n\n  #loadingMessage {\n    text-align: center;\n    padding: 40px;\n    background-color: #eee;\n  }\n\n  #canvas {\n    width: 100%;\n  }\n\n  #canvasResult {\n    width: 100%;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqFE,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,WAAW,CAAC,CAAC,UAAU,CACpC,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,MAAM,CAAE,IAAI,CAAC,CAAC,CACd,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,eAAe,eAAC,CAAC,AACf,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,AACb,CAAC,AAED,aAAa,eAAC,CAAC,AACb,KAAK,CAAE,IAAI,AACb,CAAC"
}